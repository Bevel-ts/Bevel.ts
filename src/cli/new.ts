#!/usr/bin/env bun
import { mkdir, writeFile, copyFile, access } from "fs/promises";
import { existsSync } from "fs";
import { join, resolve, dirname } from "path";
import { fileURLToPath } from "url";
import chalk from "chalk";

const log = console.log;
const appName = process.argv[2];

if (!appName) {
  log(chalk.red("❌ プロジェクト名を指定してください"));
  process.exit(1);
}

const targetDir = resolve(process.cwd(), appName);

if (existsSync(targetDir)) {
  log(chalk.yellow(`⚠️ 既に ${appName} ディレクトリが存在します。上書きしません。`));
  process.exit(1);
}

const __dirname = dirname(fileURLToPath(import.meta.url));
const baseDir = join(__dirname, "../templates/base");

console.log("baseDir:", baseDir);

const files: { path: string; content?: string; copyFrom?: string }[] = [
  { path: "src/routes/.gitkeep", content: "" },
  { path: "src/schemas/.gitkeep", content: "" },
  { path: "src/services/.gitkeep", content: "" },
  { path: "src/tests/.gitkeep", content: "" },
  { path: "src/auth/lucia.ts", copyFrom: "auth/lucia.ts" },
  { path: "src/types/generated.ts", content: "// Generated types go here\n" },
  { path: "src/index.ts", content: "export default {};\n" },
  { path: "tsconfig.json", copyFrom: "tsconfig.json" },
  { path: "bunfig.toml", copyFrom: "bunfig.toml" },
  { path: ".gitignore", copyFrom: ".gitignore" },
  { path: ".env", content: "# Environment variables\n" },
  { path: "README.md", content: `# ${appName}\n\nGenerated by Bevel CLI.\n` },
  { path: "package.json", content: `{\n  "name": "${appName}",\n  "scripts": {\n    "dev": "bun run src/index.ts",\n    "test": "bun test"\n  }\n}\n` },

];

async function createProject() {
  for (const file of files) {
    const fullPath = join(targetDir, file.path);
    const dir = fullPath.substring(0, fullPath.lastIndexOf("/"));
    await mkdir(dir, { recursive: true });
    if (file.copyFrom) {
      await copyFile(join(baseDir, file.copyFrom), fullPath);
    } else {
      await writeFile(fullPath, file.content ?? "");
    }
  }

  log(chalk.green(`✅ プロジェクト ${appName} を生成しました\n`));
  log(`${appName}/\n├── src/\n│   ├── routes/\n│   ├── schemas/\n│   ├── services/\n│   ├── tests/\n│   ├── auth/\n│   │   └── lucia.ts\n│   ├── types/\n│   │   └── generated.ts\n│   └── index.ts\n├── tsconfig.json\n├── bunfig.toml\n├── .env\n├── .gitignore\n├── package.json\n└── README.md`);
}

createProject();
createProject().catch((e) => {
  log(chalk.red(`❌ プロジェクト生成中にエラーが発生しました: ${e.message}`));
  process.exit(1);
});
